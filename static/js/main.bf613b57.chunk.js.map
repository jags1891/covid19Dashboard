{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","confirmed","recovered","casualty","countries","lastUpdated","getCountryData","bind","this","getData","Axios","get","resApi","resCountries","data","str","Date","lastUpdate","toString","setState","value","deaths","e","target","countryDataResp","console","log","response","status","map","h","i","key","name","className","onChange","renderCountryOptions","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mVAIqBA,E,kDACpB,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAKPC,MAAQ,CACPC,UAAW,EACXC,UAAW,EACXC,SAAU,EACVC,UAAW,GACXC,YAAa,IARb,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBAHJ,E,gEAelBC,KAAKC,Y,wKAIgBC,IAAMC,IAAI,gC,cAAzBC,E,gBACqBF,IAAMC,IAChC,4C,OADKE,E,OAGAT,EAAYS,EAAaC,KAAKV,UAC9BW,EAAM,IAAIC,KAAKJ,EAAOE,KAAKG,YAC7BZ,EAAcU,EAAIG,WACtBV,KAAKW,SAAS,CACblB,UAAWW,EAAOE,KAAKb,UAAUmB,MACjClB,UAAWU,EAAOE,KAAKZ,UAAUkB,MACjCjB,SAAUS,EAAOE,KAAKO,OAAOD,MAC7BhB,YACAC,gB,qLAImBiB,G,mFAEI,cAAnBA,EAAEC,OAAOH,M,gBACZZ,KAAKC,U,sCAEyBC,IAAMC,IAAN,mDACeW,EAAEC,OAAOH,Q,OADhDI,E,OAGNhB,KAAKW,SAAS,CACblB,UAAWuB,EAAgBV,KAAKb,UAAUmB,MAC1ClB,UAAWsB,EAAgBV,KAAKZ,UAAUkB,MAC1CjB,SAAUqB,EAAgBV,KAAKO,OAAOD,Q,yDAIxCK,QAAQC,IAAR,MAC4B,MAAxB,KAAIC,SAASC,QAChBpB,KAAKW,SAAS,CACblB,UAAW,oBACXC,UAAW,oBACXC,SAAU,sB,8JAOb,OAAkB,MAAdK,KAAKR,MAAsB,2CACxBQ,KAAKR,MAAMI,UAAUyB,KAAI,SAACC,EAAGC,GACnC,OAAO,4BAAQC,IAAKD,GAAID,EAAEG,W,+BAK3B,OACC,yBAAKC,UAAU,aACd,uDACA,4BAAK1B,KAAKR,MAAMK,aAChB,4BAAQ6B,UAAU,WAAWC,SAAU3B,KAAKF,gBAC3C,6CACCE,KAAK4B,wBAEP,yBAAKF,UAAU,QACd,yBAAKA,UAAU,iBACd,yCACA,qCACA,4BAAK1B,KAAKR,MAAMC,UAAhB,MAED,yBAAKiC,UAAU,iBACd,yCACA,qCACA,4BAAK1B,KAAKR,MAAME,UAAhB,MAED,yBAAKgC,UAAU,gBACd,wCACA,qCACA,4BAAK1B,KAAKR,MAAMG,SAAhB,Y,GA5F2BkC,IAAMC,WCQnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.bf613b57.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Axios from \"axios\";\n\nexport default class App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.getCountryData = this.getCountryData.bind(this);\n\t}\n\n\tstate = {\n\t\tconfirmed: 0,\n\t\trecovered: 0,\n\t\tcasualty: 0,\n\t\tcountries: [],\n\t\tlastUpdated: \"\",\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.getData();\n\t}\n\n\tasync getData() {\n\t\tconst resApi = await Axios.get(\"https://covid.mathdro.id/api\");\n\t\tconst resCountries = await Axios.get(\n\t\t\t\"https://covid19.mathdro.id/api/countries\"\n\t\t);\n\t\tconst countries = resCountries.data.countries;\n\t\tconst str = new Date(resApi.data.lastUpdate);\n\t\tlet lastUpdated = str.toString();\n\t\tthis.setState({\n\t\t\tconfirmed: resApi.data.confirmed.value,\n\t\t\trecovered: resApi.data.recovered.value,\n\t\t\tcasualty: resApi.data.deaths.value,\n\t\t\tcountries,\n\t\t\tlastUpdated,\n\t\t});\n\t}\n\n\tasync getCountryData(e) {\n\t\ttry {\n\t\t\tif (e.target.value === \"Wordlwide\") {\n\t\t\t\tthis.getData();\n\t\t\t} else {\n\t\t\t\tconst countryDataResp = await Axios.get(\n\t\t\t\t\t`https://covid19.mathdro.id/api/countries/${e.target.value}`\n\t\t\t\t);\n\t\t\t\tthis.setState({\n\t\t\t\t\tconfirmed: countryDataResp.data.confirmed.value,\n\t\t\t\t\trecovered: countryDataResp.data.recovered.value,\n\t\t\t\t\tcasualty: countryDataResp.data.deaths.value,\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\tif (err.response.status === 404) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tconfirmed: \"No data available\",\n\t\t\t\t\trecovered: \"No data available\",\n\t\t\t\t\tcasualty: \"No data available\",\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\trenderCountryOptions() {\n\t\tif (this.state == null) return <option>No data</option>;\n\t\treturn this.state.countries.map((h, i) => {\n\t\t\treturn <option key={i}>{h.name}</option>;\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<h1>Corona (covid-19) cases</h1>\n\t\t\t\t<h5>{this.state.lastUpdated}</h5>\n\t\t\t\t<select className=\"dropdown\" onChange={this.getCountryData}>\n\t\t\t\t\t<option>Wordlwide</option>\n\t\t\t\t\t{this.renderCountryOptions()}\n\t\t\t\t</select>\n\t\t\t\t<div className=\"flex\">\n\t\t\t\t\t<div className=\"box confirmed\">\n\t\t\t\t\t\t<h3>Confirmed</h3>\n\t\t\t\t\t\t<h3>cases</h3>\n\t\t\t\t\t\t<h2>{this.state.confirmed} </h2>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"box recovered\">\n\t\t\t\t\t\t<h3>Recovered</h3>\n\t\t\t\t\t\t<h3>cases</h3>\n\t\t\t\t\t\t<h2>{this.state.recovered} </h2>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"box casualty\">\n\t\t\t\t\t\t<h3>Casualty</h3>\n\t\t\t\t\t\t<h3>cases</h3>\n\t\t\t\t\t\t<h2>{this.state.casualty} </h2>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}